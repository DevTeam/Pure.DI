<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pure.DI.Core</name>
    </assembly>
    <members>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
                The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:Pure.DI.Lifetime">
            <summary>
            Binding lifetimes.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.Singleton).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
            <seealso cref="M:Pure.DI.IConfiguration.DefaultLifetime(Pure.DI.Lifetime)"/>
            <seealso cref="M:Pure.DI.IConfiguration.DefaultLifetime``1(Pure.DI.Lifetime,System.Object[])"/>
        </member>
        <member name="F:Pure.DI.Lifetime.Transient">
            <summary>
            Specifies to create a new dependency instance each time. This is the default value and can be omitted.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.Transient).To&lt;Dependency&gt;();
            </code>
            This is the default lifetime, it can be omitted, for example:
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pure.DI.Lifetime.Singleton">
            <summary>
            Ensures that there will be a single instance of the dependency for each composition.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.Singleton).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pure.DI.Lifetime.PerResolve">
            <summary>
            Guarantees that there will be a single instance of the dependency for each root of the composition.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.PerResolve).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pure.DI.Lifetime.PerBlock">
            <summary>
            Does not guarantee that there will be a single instance of the dependency for each root of the composition, but is useful to reduce the number of instances of type.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.PerBlock).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pure.DI.Lifetime.Scoped">
            <summary>
            Ensures that there will be a single instance of the dependency for each scope.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.Singleton).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Pure.DI.Hint">
            <summary>
            Hints for the code generator and can be used to fine tune code generation.
            <example>
            <code>
            // Resolve = Off
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.Resolve, "Off")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.Resolve">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to generate <c>Resolve</c> methods. <c>On</c> by default.
            <example>
            <code>
            // Resolve = Off
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.Resolve, "Off")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstance">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to use partial <c>OnNewInstance</c> method. <c>Off</c> by default.
            <example>
            <code>
            // OnNewInstance = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstance, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstancePartial">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to generate partial <c>OnNewInstance</c> method when the _OnNewInstance_ hint is <c>On</c>. <c>On</c> by default.
            <example>
            <code>
            // OnNewInstancePartial = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstancePartial, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceImplementationTypeNameRegularExpression">
            <summary>
            The regular expression to filter OnNewInstance by the instance type name. ".+" by default.
            <example>
            <code>
            // OnNewInstanceImplementationTypeNameRegularExpression = Dependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceImplementationTypeNameRegularExpression, "Dependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceImplementationTypeNameWildcard">
            <summary>
            The wildcard to filter OnNewInstance by the instance type name. "*" by default.
            <example>
            <code>
            // OnNewInstanceImplementationTypeNameWildcard = *Dependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceImplementationTypeNameWildcard, "*Dependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceTagRegularExpression">
            <summary>
            The regular expression to filter OnNewInstance by the tag. ".+" by default.
            <example>
            <code>
            // OnNewInstanceTagRegularExpression = IDependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceTagRegularExpression, "IDependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceTagWildcard">
            <summary>
            The wildcard to filter OnNewInstance by the tag. "*" by default.
            <example>
            <code>
            // OnNewInstanceTagWildcard = *IDependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceTagWildcard, "*IDependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceLifetimeRegularExpression">
            <summary>
            The regular expression to filter OnNewInstance by the lifetime. ".+" by default.
            <example>
            <code>
            // OnNewInstanceLifetimeRegularExpression = Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceLifetimeRegularExpression, "Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewInstanceLifetimeWildcard">
            <summary>
            The wildcard to filter OnNewInstance by the lifetime. "*" by default.
            <example>
            <code>
            // OnNewInstanceLifetimeWildcard = *Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewInstanceLifetimeWildcard, "*Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjection">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to use partial <c>OnDependencyInjection</c> method to control of dependency injection. <c>Off</c> by default.
            <example>
            <code>
            // OnDependencyInjection = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjection, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionPartial">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to generate partial <c>OnDependencyInjection</c> method when the _OnDependencyInjection_ hint is <c>On</c> to control of dependency injection. <c>On</c> by default.
            <example>
            <code>
            // OnDependencyInjectionPartial = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionPartial, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionImplementationTypeNameRegularExpression">
            <summary>
            The regular expression to filter OnDependencyInjection by the instance type name. ".+" by default.
            <example>
            <code>
            // OnDependencyInjectionImplementationTypeNameRegularExpression = Dependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionImplementationTypeNameRegularExpression, "Dependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionImplementationTypeNameWildcard">
            <summary>
            The wildcard to filter OnDependencyInjection by the instance type name. "*" by default.
            <example>
            <code>
            // OnDependencyInjectionImplementationTypeNameWildcard = *Dependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionImplementationTypeNameWildcard, "*Dependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionContractTypeNameRegularExpression">
            <summary>
            The regular expression to filter OnDependencyInjection by the resolving type name. ".+" by default.
            <example>
            <code>
            // OnDependencyInjectionContractTypeNameRegularExpression = IDependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionContractTypeNameRegularExpression, "IDependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionContractTypeNameWildcard">
            <summary>
            The wildcard to filter OnDependencyInjection by the resolving type name. "*" by default.
            <example>
            <code>
            // OnDependencyInjectionContractTypeNameWildcard = *IDependency
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionContractTypeName, "*IDependency")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionTagRegularExpression">
            <summary>
            The regular expression to filter OnDependencyInjection by the tag. ".+" by default.
            <example>
            <code>
            // OnDependencyInjectionTagRegularExpression = MyTag
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;("MyTag").To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionTagRegularExpression, "MyTag")
                .Bind&lt;IDependency&gt;("MyTag").To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionTagWildcard">
            <summary>
            The wildcard to filter OnDependencyInjection by the tag. "*" by default.
            <example>
            <code>
            // OnDependencyInjectionTagWildcard = MyTag
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;("MyTag").To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionTagWildcard, "MyTag")
                .Bind&lt;IDependency&gt;("MyTag").To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionLifetimeRegularExpression">
            <summary>
            The regular expression to filter OnDependencyInjection by the lifetime. ".+" by default.
            <example>
            <code>
            // OnDependencyInjectionLifetimeRegularExpression = Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionLifetimeRegularExpression, "Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnDependencyInjectionLifetimeWildcard">
            <summary>
            The wildcard to filter OnDependencyInjection by the lifetime. ".+" by default.
            <example>
            <code>
            // OnDependencyInjectionLifetimeWildcard = *Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnDependencyInjectionLifetimeWildcard, "*Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolve">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to use a partial <c>OnCannotResolve&lt;T&gt;(...)</c> method to handle a scenario in which the dependency cannot be resolved. <c>Off</c> by default.
            <example>
            <code>
            // OnCannotResolve = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolve, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolvePartial">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to generate a partial <c>OnCannotResolve&lt;T&gt;(...)</c> method when the <c>OnCannotResolve</c> hint is <c>On</c> to handle a scenario in which the dependency cannot be resolved. <c>On</c> by default.
            <example>
            <code>
            // OnCannotResolvePartial = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolvePartial, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveContractTypeNameRegularExpression">
            <summary>
            The regular expression to filter OnCannotResolve by the resolving type name. ".+" by default.
            <example>
            <code>
            // OnCannotResolveContractTypeNameRegularExpression = OtherType
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveContractTypeNameRegularExpression, "OtherType")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveContractTypeNameWildcard">
            <summary>
            The wildcard to filter OnCannotResolve by the resolving type name. "*" by default.
            <example>
            <code>
            // OnCannotResolveContractTypeNameWildcard = *OtherType
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveContractTypeNameWildcard, "*OtherType")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveTagRegularExpression">
            <summary>
            The regular expression to filter OnCannotResolve by the tag. ".+" by default.
            <example>
            <code>
            // OnCannotResolveTagRegularExpression = MyTag
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveTagRegularExpression, "MyTag")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveTagWildcard">
            <summary>
            The wildcard to filter OnCannotResolve by the tag. "*" by default.
            <example>
            <code>
            // OnCannotResolveTagWildcard = MyTag
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveTagWildcard, "MyTag")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveLifetimeRegularExpression">
            <summary>
            The regular expression to filter OnCannotResolve by the lifetime. ".+" by default.
            <example>
            <code>
            // OnCannotResolveLifetimeRegularExpression = Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveLifetimeRegularExpression, "Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnCannotResolveLifetimeWildcard">
            <summary>
            The wildcard to filter OnCannotResolve by the lifetime. "*" by default.
            <example>
            <code>
            // OnCannotResolveLifetimeWildcard = *Singleton
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnCannotResolveLifetimeWildcard, "*Singleton")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewRoot">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to use a static partial <c>OnNewRoot&lt;T&gt;(...)</c> method to handle the new composition root registration event. <c>Off</c> by default.
            <example>
            <code>
            // OnNewRoot = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewRoot, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.OnNewRootPartial">
            <summary>
            <c>On</c> or <c>Off</c>. Determines whether to generate a static partial <c>OnNewRoot&lt;T&gt;(...)</c> method when the <c>OnNewRoot</c> hint is <c>On</c> to handle the new composition root registration event. <c>On</c> by default.
            <example>
            <code>
            // OnNewRootPartial = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.OnNewRootPartial, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ToString">
            <summary>
            <c>On</c> or <c>Off</c>. Determine if the <c>ToString()</c> method should be generated. This method provides a text-based class diagram in the format mermaid. <c>Off</c> by default. 
            <example>
            <code>
            // ToString = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ToString, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ThreadSafe">
            <summary>
            <c>On</c> or <c>Off</c>. This hint determines whether object composition will be created in a thread-safe manner. <c>On</c> by default.
            <example>
            <code>
            // ThreadSafe = Off
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ThreadSafe, "Off")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ResolveMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public T Resolve&lt;T&gt;()</c>. "public" by default.
            <example>
            <code>
            // ResolveMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ResolveMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ResolveMethodName">
            <summary>
            Overrides name of the method <c>public T Resolve&lt;T&gt;()</c>. "Resolve" by default.
            <example>
            <code>
            // ResolveMethodName = GetService
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ResolveMethodName, "GetService")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ResolveByTagMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public T Resolve&lt;T&gt;(object? tag)</c>. "public" by default.
            <example>
            <code>
            // ResolveByTagMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ResolveByTagMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ResolveByTagMethodName">
            <summary>
            Overrides name of the method <c>public T Resolve&lt;T&gt;(object? tag)</c>. "Resolve" by default.
            <example>
            For example:
            <code>
            // ResolveByTagMethodName = GetService
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ResolveByTagMethodName, "GetService")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ObjectResolveMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public object Resolve(Type type)</c>. "public" by default.
            <example>
            <code>
            // ObjectResolveMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ObjectResolveMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ObjectResolveMethodName">
            <summary>
            Overrides name of the method <c>public object Resolve(Type type)</c>. "Resolve" by default.
            <example>
            <code>
            // ObjectResolveMethodName = GetService
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ObjectResolveMethodName, "GetService")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ObjectResolveByTagMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public object Resolve(Type type, object? tag)</c>. "public" by default.
            <example>
            <code>
            // ObjectResolveByTagMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ObjectResolveByTagMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.ObjectResolveByTagMethodName">
            <summary>
            Overrides name of the method <c>public object Resolve(Type type, object? tag)</c>. "Resolve" by default.
            <example>
            <code>
            // ObjectResolveByTagMethodName = GetService
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.ObjectResolveByTagMethodName, "GetService")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.DisposeMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public void Dispose()</c>. "public" by default.
            <example>
            <code>
            // DisposeMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.DisposeMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.DisposeAsyncMethodModifiers">
            <summary>
            Overrides modifiers of the method <c>public <see cref="T:System.Threading.Tasks.ValueTask"/> DisposeAsyncMethodModifiers()</c>. "public" by default.
            <example>
            <code>
            // DisposeAsyncMethodModifiers = internal
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.DisposeAsyncMethodModifiers, "internal")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.FormatCode">
            <summary>
            <c>On</c> or <c>Off</c>. Specifies whether the generated code should be formatted. This option consumes a lot of CPU resources. <c>Off</c> by default.
            <example>
            <code>
            // FormatCode = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.FormatCode, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.SeverityOfNotImplementedContract">
            <summary>
            <c>Error</c> or <c>Warning</c> or <c>Info</c> or <c>Hidden</c>. Indicates the severity level of the situation when, in the binding, an implementation does not implement a contract. <c>Error</c> by default.
            <example>
            <code>
            // FormatCode = On
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.SeverityOfNotImplementedContracts, "On")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.Comments">
            <summary>
            <c>On</c> or <c>Off</c>. Specifies whether the generated code should be commented. <c>On</c> by default.
            <example>
            <code>
            // Comments = Off
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.Comments, "Off")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="F:Pure.DI.Hint.SystemThreadingLock">
            <summary>
            <c>On</c> or <c>Off</c>. Indicates whether <see cref="!:System.Threading.Lock"/> should be used whenever possible instead of the classic approach of synchronizing object access using <see cref="T:System.Threading.Monitor"/>. <c>On</c> by default.
            <example>
            <code>
            // SystemThreadingLock = Off
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            <br/>
            or using the API call <see cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>:
            <code>
            DI.Setup("Composition")
                .Hint(Hint.SystemThreadingLock, "Off")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)"/>
        </member>
        <member name="T:Pure.DI.GenericTypeArgumentAttribute">
            <summary>
            Represents a generic type argument attribute. It allows you to create custom generic type argument such as <see cref="T:Pure.DI.TTS"/>, <see cref="T:Pure.DI.TTDictionary`2"/>, etc. 
            <example>
            <code>
            [GenericTypeArgument]
            internal interface TTMy: IMy { }
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.GenericTypeArgumentAttribute``1"/>
            <seealso cref="M:Pure.DI.IConfiguration.GenericTypeArgument``1"/>
        </member>
        <member name="T:Pure.DI.OrdinalAttribute">
             <summary>
             Represents an ordinal attribute.
             This attribute is part of the API, but you can use your own attribute at any time, and this allows you to define them in the assembly and namespace you want.
             <example>
             For constructors, it defines the sequence of attempts to use a particular constructor to create an object:
             <code>
             class Service : IService
             {
                 private readonly string _name;
             
            
                 [Ordinal(1)]
                 public Service(IDependency dependency) =&gt;
                     _name = "with dependency";
             
            
                 [Ordinal(0)]
                 public Service(string name) =&gt; _name = name;
             }
             </code>
             <br/>
             For fields, properties and methods, it specifies to perform dependency injection and defines the sequence:
             <code>
             class Person : IPerson
             {
                 private readonly string _name = "";
             
                 [Ordinal(0)]
                 public int Id;
            
             
                 [Ordinal(1)]
                 public string FirstName
                 {
                     set
                     {
                         _name = value;
                     }
                 }
             
            
                 public IDependency? Dependency { get; private set; }
             
            
                 [Ordinal(2)]
                 public void SetDependency(IDependency dependency) =&gt;
                     Dependency = dependency;
             }
             </code>
             </example>
             </summary>
             <seealso cref="T:Pure.DI.DependencyAttribute"/>
             <seealso cref="T:Pure.DI.TagAttribute"/>
             <seealso cref="T:Pure.DI.TypeAttribute"/>
        </member>
        <member name="M:Pure.DI.OrdinalAttribute.#ctor(System.Int32)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="ordinal">The injection ordinal.</param>
        </member>
        <member name="T:Pure.DI.TagAttribute">
             <summary>
             Represents a tag attribute overriding an injection tag. The tag can be a constant, a type, or a value of an enumerated type.
             This attribute is part of the API, but you can use your own attribute at any time, and this allows you to define them in the assembly and namespace you want.
             <example>
             Sometimes it's important to take control of building a dependency graph. For example, when there are multiple implementations of the same contract. In this case, tags will help:
             <code>
             interface IDependency { }
             
            
             class AbcDependency : IDependency { }
             
            
             class XyzDependency : IDependency { }
             
            
             class Dependency : IDependency { }
             
            
             interface IService
             {
                 IDependency Dependency1 { get; }
             
            
                 IDependency Dependency2 { get; }
             }
            
             
             class Service : IService
             {
                 public Service(
                     [Tag("Abc")] IDependency dependency1,
                     [Tag("Xyz")] IDependency dependency2)
                 {
                     Dependency1 = dependency1;
                     Dependency2 = dependency2;
                 }
            
                 public IDependency Dependency1 { get; }
            
             
                 public IDependency Dependency2 { get; }
             }
            
             
             DI.Setup("Composition")
                 .Bind&lt;IDependency&gt;("Abc").To&lt;AbcDependency&gt;()
                 .Bind&lt;IDependency&gt;("Xyz").To&lt;XyzDependency&gt;()
                 .Bind&lt;IService&gt;().To&lt;Service&gt;().Root&lt;IService&gt;("Root");
             </code>
             </example>
             </summary>
             <seealso cref="T:Pure.DI.DependencyAttribute"/>
             <seealso cref="T:Pure.DI.OrdinalAttribute"/>
             <seealso cref="T:Pure.DI.TypeAttribute"/>
        </member>
        <member name="M:Pure.DI.TagAttribute.#ctor(System.Object)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="tag">The injection tag. See also <see cref="M:Pure.DI.IBinding.Tags(System.Object[])"/></param>.
        </member>
        <member name="T:Pure.DI.TypeAttribute">
             <summary>
             The injection type can be defined manually using the <c>Type</c> attribute.This attribute explicitly overrides an injected type, otherwise it would be determined automatically based on the type of the constructor/method, property, or field parameter.
             This attribute is part of the API, but you can use your own attribute at any time, and this allows you to define them in the assembly and namespace you want.
             <example>
             <code>
             interface IDependency { }
             
            
             class AbcDependency : IDependency { }
            
            
             class XyzDependency : IDependency { }
            
            
             interface IService
             {
                 IDependency Dependency1 { get; }
            
                 IDependency Dependency2 { get; }
             }
            
            
             class Service : IService
             {
                 public Service(
                     [Type(typeof(AbcDependency))] IDependency dependency1,
                     [Type(typeof(XyzDependency))] IDependency dependency2)
                 {
                     Dependency1 = dependency1;
                     Dependency2 = dependency2;
                 }
            
            
                 public IDependency Dependency1 { get; }
            
            
                 public IDependency Dependency2 { get; }
             }
            
            
             DI.Setup("Composition")
                 .Bind&lt;IService&gt;().To&lt;Service&gt;().Root&lt;IService&gt;("Root");
             </code>
             </example>
             </summary>
             <seealso cref="T:Pure.DI.DependencyAttribute"/>
             <seealso cref="T:Pure.DI.TagAttribute"/>
             <seealso cref="T:Pure.DI.OrdinalAttribute"/>
        </member>
        <member name="M:Pure.DI.TypeAttribute.#ctor(System.Type)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="type">The injection type. See also <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> and <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/>.</param>
        </member>
        <member name="T:Pure.DI.DependencyAttribute">
            <summary>
            A universal DI attribute that allows to specify the tag and ordinal of an injection.
            </summary>
            <param name="tag">The injection tag. See also <see cref="M:Pure.DI.IBinding.Tags(System.Object[])"/></param>.
            <param name="ordinal">The injection ordinal.</param>
            <seealso cref="T:Pure.DI.OrdinalAttribute"/>
            <seealso cref="T:Pure.DI.TagAttribute"/>
        </member>
        <member name="M:Pure.DI.DependencyAttribute.#ctor(System.Object,System.Int32)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="tag">The injection tag. See also <see cref="M:Pure.DI.IBinding.Tags(System.Object[])"/></param>.
            <param name="ordinal">The injection ordinal.</param>
        </member>
        <member name="T:Pure.DI.BindAttribute">
            <summary>
            Indicates that a property or method can be automatically added as a binding.
            <example>
            <code>
            internal class DependencyProvider
            {
                [Bind()]
                public Dependency Dep => new Dependency();
            }
            </code>
            <code>
            internal class DependencyProvider
            {
                [Bind(typeof(IDependency&lt;TT&gt;), Lifetime.Singleton)]
                public Dependency GetDep&lt;T&gt;() =&gt; new Dependency();
            }
            </code>
            <code>
            internal class DependencyProvider
            {
                [Bind(typeof(IDependency), Lifetime.PerResolve, "some tag")]
                public Dependency GetDep(int id) => new Dependency(id);
            }
            </code>
            </example>
            </summary>
            <seealso cref="F:Pure.DI.RootKinds.Exposed"/>
        </member>
        <member name="M:Pure.DI.BindAttribute.#ctor(System.Type,Pure.DI.Lifetime,System.Object[])">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="T:Pure.DI.CompositionKind">
            <summary>
            Determines how the partial class will be generated. The <see cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/> method has an additional argument <c>kind</c>, which defines the type of composition:
            <example>
            <code>
            DI.Setup("BaseComposition", CompositionKind.Internal);
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="F:Pure.DI.CompositionKind.Public">
            <summary>
            This value is used by default. If this value is specified, a normal partial class will be generated.
            </summary>
        </member>
        <member name="F:Pure.DI.CompositionKind.Internal">
            <summary>
            If this value is specified, the class will not be generated, but this setting can be used by other users as a baseline. The API call <see cref="M:Pure.DI.IConfiguration.DependsOn(System.String[])"/> is mandatory.
            </summary>
        </member>
        <member name="F:Pure.DI.CompositionKind.Global">
            <summary>
            No partial classes will be created when this value is specified, but this setting is the baseline for all installations in the current project, and the API call <see cref="M:Pure.DI.IConfiguration.DependsOn(System.String[])"/> is not required.
            </summary>
        </member>
        <member name="T:Pure.DI.RootKinds">
            <summary>
            Determines a kind of root of the composition.
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Root``1(System.String,System.Object,Pure.DI.RootKinds)"/>
            <seealso cref="M:Pure.DI.IConfiguration.RootBind``1(System.String,Pure.DI.RootKinds,System.Object[])"/>
            <seealso cref="M:Pure.DI.IConfiguration.Roots``1(System.String,Pure.DI.RootKinds,System.String)"/>
            <seealso cref="M:Pure.DI.IConfiguration.Builder``1(System.String,Pure.DI.RootKinds)"/>
            <seealso cref="M:Pure.DI.IConfiguration.Builders``1(System.String,Pure.DI.RootKinds,System.String)"/>
        </member>
        <member name="F:Pure.DI.RootKinds.Default">
            <summary>
            Specifies to use the default composition root kind.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Public">
            <summary>
            Specifies to use a <c>public</c> access modifier for the root of the composition.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Internal">
            <summary>
            Specifies to use a <c>internal</c> access modifier for the root of the composition.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Private">
            <summary>
            Specifies to use a <c>private</c> access modifier for the root of the composition.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Property">
            <summary>
            Specifies to create a composition root as a property.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Method">
            <summary>
            Specifies to create a composition root as a method.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Static">
            <summary>
            Specifies to create a static root of the composition.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Partial">
            <summary>
            Specifies to create a partial root of the composition.
            </summary>
        </member>
        <member name="F:Pure.DI.RootKinds.Exposed">
            <summary>
            Specifies to create a exposed root of the composition.
            </summary>
            <seealso cref="T:Pure.DI.BindAttribute"/>
        </member>
        <member name="F:Pure.DI.RootKinds.Protected">
            <summary>
            Specifies to use a <c>protected</c> access modifier for the root of the composition.
            </summary>
        </member>
        <member name="T:Pure.DI.Tag">
            <summary>
            Represents well known tags.
            </summary>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
        </member>
        <member name="F:Pure.DI.Tag.Unique">
            <summary>
            Unique tag.
            Begins the definition of the binding.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IService&gt;(Tag.Unique).To&lt;Service1&gt;()
                .Bind&lt;IService&gt;(Tag.Unique).To&lt;Service1&gt;()
                .Root&lt;IEnumerable&lt;IService&gt;&gt;("Root");
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pure.DI.Tag.Type">
            <summary>
            Tag of target implementation type.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IService&gt;(Tag.Type).To&lt;Service&gt;()
                .Root&lt;IService&gt;("Root", typeof(Service));
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pure.DI.Tag.On(System.String[])">
            <summary>
            This tag allows you to determine which binding will be used for explicit injection for a particular injection site.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind(Tag.On("MyNamespace.Service.Service:dep"))
                    .To&lt;Dependency&gt;()
                .Bind().To&lt;Service&gt;()
                .Root&lt;IService&gt;("Root");
            </code>
            </example>
            </summary>
            <param name="injectionSites">Set of labels for inection each, must be specified in a special format: &lt;namespace&gt;.&lt;type&gt;.&lt;member&gt;[:argument]. The argument is specified only for the constructor and methods. The wildcards &apos;*&apos; and &apos;?&apos; are supported. All names are case-sensitive. The global namespace prefix &apos;global::&apos; must be omitted.</param>
        </member>
        <member name="M:Pure.DI.Tag.OnConstructorArg``1(System.String)">
            <summary>
            This tag allows you to determine which binding will be used for explicit injection for a particular constructor argument.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind(Tag.OnConstructorArg&lt;Service&gt;("dep"))
                    .To&lt;Dependency&gt;()
                .Bind().To&lt;Service&gt;()
                .Root&lt;IService&gt;("Root");
            </code>
            </example>
            </summary>
            <param name="argName">The name of the constructor argument.</param>
        </member>
        <member name="M:Pure.DI.Tag.OnMember``1(System.String)">
            <summary>
            This tag allows you to define which binding will be used for explicit injection for property or field of the type.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind(Tag.OnMember&lt;Service&gt;("DepProperty"))
                    .To&lt;Dependency&gt;()
                .Bind().To&lt;Service&gt;()
                .Root&lt;IService&gt;("Root");
            </code>
            </example>
            </summary>
            <param name="memberName">The name of the type member.</param>
        </member>
        <member name="M:Pure.DI.Tag.OnMethodArg``1(System.String,System.String)">
            <summary>
            This tag allows you to determine which binding will be used for explicit injection for a particular method argument.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind(Tag.OnMethodArg&lt;Service&gt;("DoSomething", "state"))
                    .To&lt;Dependency&gt;()
                .Bind().To&lt;Service&gt;()
                .Root&lt;IService&gt;("Root");
            </code>
            </example>
            </summary>
            <param name="methodName">The name of the type method.</param>
            <param name="argName">The name of the method argument.</param>
        </member>
        <member name="F:Pure.DI.Tag.UsingDeclarations">
            <summary>
            Atomically generated smart tag with value "UsingDeclarations".
            It's used for:
            <br/>
            <br/>
            class <see cref="T:Pure.DI.Generator"/>
            <list type="number">
            <item><see cref="T:Pure.DI.Core.Code.CompositionClassBuilder"/> &lt;-- <see cref="T:Pure.DI.Core.IBuilder`2"/>(UsingDeclarations) -- <see cref="T:Pure.DI.Core.Code.UsingDeclarationsBuilder"/> as <see cref="F:Pure.DI.Lifetime.PerBlock"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Pure.DI.Tag.GenericType">
            <summary>
            Atomically generated smart tag with value "GenericType".
            It's used for:
            <br/>
            <br/>
            class <see cref="T:Pure.DI.Generator"/>
            <list type="number">
            <item><see cref="T:Pure.DI.Core.Code.TypeResolver"/> &lt;-- <see cref="T:Pure.DI.Core.IIdGenerator"/>(GenericType) -- <see cref="T:Pure.DI.Core.IdGenerator"/> as <see cref="F:Pure.DI.Lifetime.PerResolve"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Pure.DI.Tag.Injection">
            <summary>
            Atomically generated smart tag with value "Injection".
            </summary>
        </member>
        <member name="F:Pure.DI.Tag.CompositionClass">
            <summary>
            Atomically generated smart tag with value "CompositionClass".
            It's used for:
            <br/>
            <br/>
            class <see cref="T:Pure.DI.Generator"/>
            <list type="number">
            <item><see cref="T:Pure.DI.Core.CodeBuilder"/> &lt;-- <see cref="T:Pure.DI.Core.IBuilder`2"/>(CompositionClass) -- <see cref="T:Pure.DI.Core.Code.CompositionClassBuilder"/> as <see cref="F:Pure.DI.Lifetime.PerBlock"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Pure.DI.Tag.UniqueTag">
            <summary>
            Atomically generated smart tag with value "UniqueTag".
            It's used for:
            <br/>
            <br/>
            class <see cref="T:Pure.DI.Generator"/>
            <list type="number">
            <item><see cref="T:Pure.DI.Core.ApiInvocationProcessor"/> &lt;-- (UniqueTag) -- <see cref="T:Pure.DI.Core.IdGenerator"/> as <see cref="F:Pure.DI.Lifetime.PerResolve"/></item>
            </list>
            </summary>
        </member>
        <member name="T:Pure.DI.IOwned">
            <summary>
            This abstraction allows a disposable object to be disposed of.
            </summary>
            <seealso cref="T:Pure.DI.Owned"/>
            <seealso cref="M:Pure.DI.IConfiguration.Accumulate``2(Pure.DI.Lifetime[])"/>
        </member>
        <member name="T:Pure.DI.Owned">
            <summary>
            Performs accumulation and disposal of disposable objects.
            </summary>
            <seealso cref="T:Pure.DI.IOwned"/>
            <seealso cref="M:Pure.DI.IConfiguration.Accumulate``2(Pure.DI.Lifetime[])"/>
        </member>
        <member name="M:Pure.DI.Owned.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Pure.DI.Owned`1">
            <summary>
            Contains a value and gives the ability to dispose of that value.
            </summary>
            <typeparam name="T">Type of value owned.</typeparam>
            <seealso cref="T:Pure.DI.IOwned"/>
            <seealso cref="T:Pure.DI.Owned"/>
            <seealso cref="M:Pure.DI.IConfiguration.Accumulate``2(Pure.DI.Lifetime[])"/>
        </member>
        <member name="F:Pure.DI.Owned`1.Value">
            <summary>
            Own value.
            </summary>
        </member>
        <member name="M:Pure.DI.Owned`1.#ctor(`0,Pure.DI.IOwned)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="value">Own value.</param>
            <param name="owned">The abstraction allows a disposable object to be disposed of.</param>
        </member>
        <member name="M:Pure.DI.Owned`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Pure.DI.IConfiguration">
            <summary>
            An API for a Dependency Injection setup.
            </summary>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind(System.Object[])">
            <summary>
            Begins the binding definition for the implementation type itself, and if the implementation is not an abstract class or structure, for all abstract but NOT special types that are directly implemented.
            Special types include:
            <list type="bullet">
            <item>System.Object</item>
            <item>System.Enum</item>
            <item>System.MulticastDelegate</item>
            <item>System.Delegate</item>
            <item>System.Collections.IEnumerable</item>
            <item>System.Collections.Generic.IEnumerable&lt;T&gt;</item>
            <item>System.Collections.Generic.IList&lt;T&gt;</item>
            <item>System.Collections.Generic.ICollection&lt;T&gt;</item>
            <item>System.Collections.IEnumerator</item>
            <item>System.Collections.Generic.IEnumerator&lt;T&gt;</item>
            <item>System.Collections.Generic.IIReadOnlyList&lt;T&gt;</item>
            <item>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</item>
            <item>System.IDisposable</item>
            <item>System.IAsyncResult</item>
            <item>System.AsyncCallback</item>
            </list>
            <example>
            <code>
            DI.Setup("Composition")
                .Bind().To&lt;Service&gt;();
            </code>
            </example>
            </summary>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``1(System.Object[])">
            <summary>
            Begins the definition of the binding.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IService&gt;().To&lt;Service&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The type of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``2(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``3(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``4(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 4 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``5(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 4 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``6(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 4 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam> 
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``7(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 4 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam>
            <typeparam name="T7">The type 7 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Bind``8(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 4 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam>
            <typeparam name="T7">The type 7 of dependency to be bound.</typeparam>
            <typeparam name="T8">The type 8 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.RootBind``1(System.String,Pure.DI.RootKinds,System.Object[])">
            <summary>
            Begins the definition of the binding with <see cref="M:Pure.DI.IConfiguration.Root``1(System.String,System.Object,Pure.DI.RootKinds)"/> applied.
            <example>
            <code>
            DI.Setup("Composition")
                .RootBind&lt;IService&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The type of dependency to be bound.</typeparam>
            <param name="name">
            Specifies the name of the root of the composition. If the value is empty, a private root will be created, which can be used when calling <c>Resolve</c> methods.
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the root type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the root type.</description>
            </item>
            <item>
            <term>{tag}</term>
            <description>Will be replaced with the first tag name.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="kind">The optional argument specifying the kind for the root of the composition.</param>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding. If is is not empty, the first tag is used for the root.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:IBinding.To&lt;T1,T&gt;()"/>
            <seealso cref="!:IBinding.To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.DependsOn(System.String[])">
            <summary>
            Indicates the use of some single or multiple setups as base setups by name.
            <example>
            <code>
            DI.Setup("Composition")
                .DependsOn(nameof(CompositionBase));
            </code>
            </example>
            </summary>
            <param name="setupNames">A set of names for the basic setups on which this one depends.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.GenericTypeArgumentAttribute``1">
            <summary>
            Specifies a custom generic type argument attribute.
            <example>
            <code>
            [AttributeUsage(AttributeTargets.Interface | AttributeTargets.Class | AttributeTargets.Struct)]
            class MyGenericTypeArgumentAttribute : Attribute;
             
            [MyGenericTypeArgument]
            interface TTMy; 
             
            DI.Setup("Composition")
                .GenericTypeAttribute&lt;MyGenericTypeArgumentAttribute&gt;()
                .Bind&lt;IDependency&lt;TTMy&gt;&gt;().To&lt;Dependency&lt;TTMy&gt;&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.GenericTypeArgumentAttribute``1"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.TypeAttribute``1(System.Int32)">
            <summary>
            Specifies a custom attribute that overrides the injection type.
            <example>
            <code>
            DI.Setup("Composition")
                .TypeAttribute&lt;MyTypeAttribute&gt;();
            </code>
            </example>
            </summary>
            <param name="typeArgumentPosition">The optional parameter that specifies the position of the type parameter in the attribute constructor. 0 by default. See predefined attribute <see cref="M:Pure.DI.IConfiguration.TypeAttribute``1(System.Int32)"/>.</param>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.TypeAttribute"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.TagAttribute``1(System.Int32)">
            <summary>
            Specifies a tag attribute that overrides the injected tag.
            <example>
            <code>
            DI.Setup("Composition")
                .TagAttribute&lt;MyTagAttribute&gt;();
            </code>
            </example>
            </summary>
            <param name="tagArgumentPosition">The optional parameter that specifies the position of the tag parameter in the attribute constructor. 0 by default. See the predefined <see cref="M:Pure.DI.IConfiguration.TagAttribute``1(System.Int32)"/> attribute.</param>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.TagAttribute"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.OrdinalAttribute``1(System.Int32)">
            <summary>
            Specifies a custom attribute that overrides the injection ordinal.
            <example>
            <code>
            DI.Setup("Composition")
                .OrdinalAttribute&lt;MyOrdinalAttribute&gt;();
            </code>
            </example>
            </summary>
            <param name="ordinalArgumentPosition">The optional parameter that specifies the position of the ordinal parameter in the attribute constructor. 0 by default. See the predefined <see cref="M:Pure.DI.IConfiguration.OrdinalAttribute``1(System.Int32)"/> attribute.</param>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.OrdinalAttribute"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.DefaultLifetime(Pure.DI.Lifetime)">
            <summary>
            Overrides the default <see cref="T:Pure.DI.Lifetime"/> for all bindings further down the chain. If not specified, the <see cref="F:Pure.DI.Lifetime.Transient"/> lifetime is used.
            <example>
            <code>
            DI.Setup("Composition")
                .DefaultLifetime(Lifetime.Singleton);
            </code>
            </example>
            </summary>
            <param name="lifetime">The default lifetime.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.Lifetime"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.DefaultLifetime``1(Pure.DI.Lifetime,System.Object[])">
            <summary>
            Overrides the default <see cref="T:Pure.DI.Lifetime"/> for all bindings can be casted to type <typeparamref name="T"/> further down the chain.
            <example>
            <code>
            DI.Setup("Composition")
                .DefaultLifetime&lt;IMySingleton&gt;(Lifetime.Singleton);
            </code>
            <code>
            DI.Setup("Composition")
                .DefaultLifetime&lt;IMySingleton&gt;(Lifetime.Singleton, "my tag");
            </code>
            </example>
            </summary>
            <param name="lifetime">The default lifetime.</param>
            <param name="tags">The optional argument specifying the binding tags for which it will set the default lifetime. If not specified, the default lifetime will be set for any tags.</param>
            <typeparam name="T">The default lifetime will be applied to bindings if the implementation class can be cast to type <typeparamref name="T"/>.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.Lifetime"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Arg``1(System.String,System.Object[])">
            <summary>
            Adds a partial class argument and replaces the default constructor by adding this argument as a parameter. It is only created if this argument is actually used. 
            <example>
            <code>
            DI.Setup("Composition")
                .Arg&lt;int&gt;("id");
            </code>
            </example>
            </summary>
            <param name="name">
            The argument name.
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the argument type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the argument type.</description>
            </item>
            <item>
            <term>{tag}</term>
            <description>Will be replaced with the first tag name.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="tags">The optional argument that specifies the tags for the argument.</param>
            <typeparam name="T">The argument type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.RootArg``1(System.String,System.Object[])"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.RootArg``1(System.String,System.Object[])">
            <summary>
            Adds a root argument to use as a root parameter. 
            <example>
            <code>
            DI.Setup("Composition")
                .RootArg&lt;int&gt;("id");
            </code>
            </example>
            </summary>
            <param name="name">
            The argument name.
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the argument type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the argument type.</description>
            </item>
            <item>
            <term>{tag}</term>
            <description>Will be replaced with the first tag name.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="tags">The optional argument that specifies the tags for the argument.</param>
            <typeparam name="T">The argument type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Arg``1(System.String,System.Object[])"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Root``1(System.String,System.Object,Pure.DI.RootKinds)">
            <summary>
            Specifying the root of the composition.
            <example>
            <code>
            DI.Setup("Composition")
                .Root&lt;Service&gt;("MyService");
            </code>
            </example>
            <example>
            <code>
            DI.Setup("Composition")
                .Root&lt;Service&gt;("My{type}");
            </code>
            </example>
            </summary>
            <param name="name">
            Specifies the name of the root of the composition. If the value is empty, a private root will be created, which can be used when calling <c>Resolve</c> methods.
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the root type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the root type.</description>
            </item>
            <item>
            <term>{tag}</term>
            <description>Will be replaced with the root tag name.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="tag">The optional argument specifying the tag for the root of the composition.</param>
            <param name="kind">The optional argument specifying the kind for the root of the composition.</param>
            <typeparam name="T">The composition root type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.RootBind``1(System.String,Pure.DI.RootKinds,System.Object[])"/>
            <seealso cref="M:Pure.DI.IConfiguration.Roots``1(System.String,Pure.DI.RootKinds,System.String)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Roots``1(System.String,Pure.DI.RootKinds,System.String)">
            <summary>
            Specifies to define composition roots for all types inherited from <see cref="!:T"/> available at compile time at the point where the method is called.
            <example>
            <code>
            DI.Setup("Composition")
                .Roots&lt;IService&gt;();
            </code>
            </example>
            <example>
            <code>
            DI.Setup("Composition")
                .Roots&lt;IService&gt;("Root{type}", filter: "*MyService");
            </code>
            </example>
            </summary>
            <param name="name">
            Specifies the name of the roots of the composition. If the value is empty, private roots will be created, which can be used when calling <c>Resolve</c> methods.
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the type.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="kind">The optional argument specifying the kind for the root of the composition.</param>
            <param name="filter">A wildcard to filter root types by their full name.</param>
            <typeparam name="T">The composition root base type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Root``1(System.String,System.Object,Pure.DI.RootKinds)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Builder``1(System.String,Pure.DI.RootKinds)">
            <summary>
            Specifies the method of the composition builder. The first argument to the method will always be the instance to be built. The remaining arguments to this method will be listed in the order in which they are defined in the setup.Specifies to create a composition builder method. The first argument to the method will always be the instance to be built. The remaining arguments to this method will be listed in the order in which they are defined in the setup.
            <example>
            <code>
            DI.Setup("Composition")
                .Builder&lt;Service&gt;("BuildUpMyService");
            </code>
            </example>
            </summary>
            <param name="name">
            Specifies the name of the builder. The default name is "BuildUp".
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the type.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="kind">The optional argument specifying the kind for the root of the composition.</param>
            <typeparam name="T">The composition root type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Builders``1(System.String,Pure.DI.RootKinds,System.String)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Builders``1(System.String,Pure.DI.RootKinds,System.String)">
            <summary>
            Specifies to define builders for all types inherited from <see cref="!:T"/> available at compile time at the point where the method is called.
            <example>
            <code>
            DI.Setup("Composition")
                .Builders&lt;Service&gt;();
            </code>
            </example>
            <example>
            <code>
            DI.Setup("Composition")
                .Builder&lt;Service&gt;("BuildUp");
            </code>
            </example>
            <example>
            <code>
            DI.Setup("Composition")
                .Builder&lt;Service&gt;("BuildUp{type}", filter: "*MyService");
            </code>
            </example>
            </summary>
            <param name="name">
            Specifies the name of the builders. The default name is "BuildUp".
            <para>
            The name supports templating:
            <list type="table">
            <listheader>
            <term>Template</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>{type}</term>
            <description>Will be replaced by the short name of the type without its namespaces.</description>
            </item>
            <item>
            <term>{TYPE}</term>
            <description>Will be replaced with the full name of the type.</description>
            </item>
            </list>
            </para>
            </param>
            <param name="kind">The optional argument specifying the kind for the root of the composition.</param>
            <param name="filter">A wildcard to filter builder types by their full name.</param>
            <typeparam name="T">The composition root base type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Builder``1(System.String,Pure.DI.RootKinds)"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Hint(Pure.DI.Hint,System.String)">
            <summary>
            Defines a hint for fine-tuning code generation.
            <example>
            <code>
            DI.Setup("Composition")
                .Hint(Resolve, "Off");
            </code>
            </example>
            </summary>
            <param name="hint">The hint type.</param>
            <param name="value">The hint value.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.Hint"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.Accumulate``2(Pure.DI.Lifetime[])">
            <summary>
            Registers an accumulator for instances.
            <example>
            <code>
            DI.Setup("Composition")
                .Accumulate&lt;IDisposable, MyAccumulator&gt;(Lifetime.Transient);
            </code>
            </example>
            </summary>
            <param name="lifetimes"><see cref="T:Pure.DI.Lifetime"/> of the instances to be accumulated. Instances with lifetime <see cref="F:Pure.DI.Lifetime.Singleton"/>, <see cref="F:Pure.DI.Lifetime.Scoped"/>, or <see cref="F:Pure.DI.Lifetime.PerResolve"/> only accumulate in an accumulator that is NOT lazily created.</param>
            <typeparam name="T">The type of instance. All instances that can be cast to this type will be aacumulated.</typeparam>
            <typeparam name="TAccumulator">The type of accumulator. It must have a public constructor without parameters and a <c>Add</c> method with a single argument that allows you to add an instance of type <typeparamref name="T"/>.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="T:Pure.DI.Lifetime"/>
        </member>
        <member name="M:Pure.DI.IConfiguration.GenericTypeArgument``1">
            <summary>
            Specifies a custom generic type argument.
            <example>
            <code>
            interface TTMy;
             
            DI.Setup("Composition")
                .GenericTypeArgument&lt;TTMy&gt;()
                .Bind&lt;IDependency&lt;TTMy&gt;&gt;().To&lt;Dependency&lt;TTMy&gt;&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The generic type marker.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.GenericTypeArgumentAttribute``1"/>
        </member>
        <member name="T:Pure.DI.IBinding">
            <summary>
            An API for a binding setup.
            </summary>
        </member>
        <member name="M:Pure.DI.IBinding.Bind(System.Object[])">
            <summary>
            Begins the binding definition for the implementation type itself, and if the implementation is not an abstract class or structure, for all abstract but NOT special types that are directly implemented.
            Special types include:
            <list type="bullet">
            <item>System.Object</item>
            <item>System.Enum</item>
            <item>System.MulticastDelegate</item>
            <item>System.Delegate</item>
            <item>System.Collections.IEnumerable</item>
            <item>System.Collections.Generic.IEnumerable&lt;T&gt;</item>
            <item>System.Collections.Generic.IList&lt;T&gt;</item>
            <item>System.Collections.Generic.ICollection&lt;T&gt;</item>
            <item>System.Collections.IEnumerator</item>
            <item>System.Collections.Generic.IEnumerator&lt;T&gt;</item>
            <item>System.Collections.Generic.IIReadOnlyList&lt;T&gt;</item>
            <item>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</item>
            <item>System.IDisposable</item>
            <item>System.IAsyncResult</item>
            <item>System.AsyncCallback</item>
            </list>
            <example>
            <code>
            DI.Setup("Composition")
                .Bind().To&lt;Service&gt;();
            </code>
            </example>
            </summary>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``1(System.Object[])">
            <summary>
            Begins the definition of the binding.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The type of dependency to be bound. Common type markers such as <see cref="T:Pure.DI.TT"/>, <see cref="T:Pure.DI.TTList`1"/> and others are also supported.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``2(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``3(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``4(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 3 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``5(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``6(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam> 
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``7(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam>
            <typeparam name="T7">The type 7 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.Bind``8(System.Object[])">
            <summary>
            Begins binding definition for multiple dependencies. See <see cref="M:Pure.DI.IBinding.Bind``1(System.Object[])"/> for examples.
            </summary>
            <typeparam name="T1">The type 1 of dependency to be bound.</typeparam>
            <typeparam name="T2">The type 2 of dependency to be bound.</typeparam>
            <typeparam name="T3">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T4">The type 3 of dependency to be bound.</typeparam>
            <typeparam name="T5">The type 5 of dependency to be bound.</typeparam>
            <typeparam name="T6">The type 6 of dependency to be bound.</typeparam>
            <typeparam name="T7">The type 7 of dependency to be bound.</typeparam>
            <typeparam name="T8">The type 8 of dependency to be bound.</typeparam>
            <param name="tags">The optional argument that specifies tags for a particular type of dependency binding.</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)">
            <summary>
            Determines the <see cref="T:Pure.DI.Lifetime"/> of a binding.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().As(Lifetime.Singleton).To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <param name="lifetime">The <see cref="T:Pure.DI.Lifetime"/> of a binding</param>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
        </member>
        <member name="M:Pure.DI.IBinding.Tags(System.Object[])">
             <summary>
             Defines the binding tags.
             <example>
             Sometimes it's important to take control of building a dependency graph. For example, when there are multiple implementations of the same contract. In this case, tags will help:
             <code>
             interface IDependency { }
             
            
             class AbcDependency : IDependency { }
             
            
             class XyzDependency : IDependency { }
             
            
             class Dependency : IDependency { }
             
            
             interface IService
             {
                 IDependency Dependency1 { get; }
             
            
                 IDependency Dependency2 { get; }
             }
            
             
             class Service : IService
             {
                 public Service(
                     [Tag("Abc")] IDependency dependency1,
                     [Tag("Xyz")] IDependency dependency2)
                 {
                     Dependency1 = dependency1;
                     Dependency2 = dependency2;
                 }
            
                 public IDependency Dependency1 { get; }
            
             
                 public IDependency Dependency2 { get; }
             }
            
             
             DI.Setup("Composition")
                 .Bind&lt;IDependency&gt;().Tags("Abc").To&lt;AbcDependency&gt;()
                 .Bind&lt;IDependency&gt;().Tags("Xyz").To&lt;XyzDependency&gt;()
                 .Bind&lt;IService&gt;().To&lt;Service&gt;().Root&lt;IService&gt;("Root");
             </code>
             </example>
             </summary>
             <param name="tags">The binding tags.</param>
             <returns>Reference to the setup continuation chain.</returns>
             <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
             <seealso cref="M:Pure.DI.IBinding.To``1"/>
             <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
             <seealso cref="!:To&lt;T1,T&gt;()"/>
             <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
             <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``1">
            <summary>
            Completes the binding chain by specifying the implementation.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;();
            </code>
            </example>
            </summary>
            <typeparam name="T">The implementation type. Also supports generic type markers such as <see cref="T:Pure.DI.TT"/>, <see cref="T:Pure.DI.TTList`1"/>, and others.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="!:To&lt;T1,T&gt;()"/>
            <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})">
             <summary>
             Completes the binding chain by specifying the implementation using a factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc.
             <example>
             <code>
             DI.Setup("Composition")
                 .Bind&lt;IService&gt;()
                 To(_ =&gt;
                 {
                     var service = new Service("My Service");
                     service.Initialize();
                     return service;
                 })
             </code>
             <br/>
             another example:
             <code>
             DI.Setup("Composition")
                 .Bind&amp;lt;IService&amp;gt;()
                 To(ctx =&amp;gt;
                 {
                     ctx.Inject&lt;IDependency&gt;(out var dependency);
                     return new Service(dependency);
                 })
             </code>
             <br/>
             and another example:
             <code>
             DI.Setup("Composition")
                 .Bind&amp;lt;IService&amp;gt;()
                 To(ctx =&amp;gt;
                 {
                     // Builds up an instance with all necessary dependencies
                     ctx.Inject&lt;Service&gt;(out var service);
            
             
                     service.Initialize();
                     return service;
                 })
             </code>
             </example>
             </summary>
             <param name="factory">An expression for manually creating and initializing an instance.</param>
             <typeparam name="T">The implementation type.</typeparam>
             <returns>Reference to the setup continuation chain.</returns>
             <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
             <seealso cref="M:Pure.DI.IBinding.To``1"/>
             <seealso cref="!:To&lt;T1,T&gt;()"/>
             <seealso cref="!:To&lt;T1,T2,T&gt;()"/>
             <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
             <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``1(System.String)">
            <summary>
            Completes the binding chain by specifying the implementation using a source code statement.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;int&gt;().To&lt;int&gt;("dependencyId")
                .Bind&lt;Func&lt;int, IDependency&gt;&gt;()
                    .To&lt;Func&lt;int, IDependency&gt;&gt;(ctx =&gt;
                        dependencyId =&gt;
                        {
                            ctx.Inject&lt;Dependency&gt;(out var dependency);
                            return dependency;
                        });
            </code>
            </example>
            </summary>
            <param name="sourceCodeStatement">Source code statement</param>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``2(System.Func{``0,``1})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            <example>
            <code>
            DI.Setup(nameof(Composition))
                .Bind&lt;IDependency&gt;().To((
                    Dependency dependency) =&gt;
                {
                    dependency.Initialize();
                    return dependency;
                });
            </code>
            A variant using <see cref="T:Pure.DI.TagAttribute"/>:
            <code>
            DI.Setup(nameof(Composition))
                .Bind&lt;IDependency&gt;().To((
                    [Tag(&quot;some tag&quot;)] Dependency dependency) =&gt;
                {
                    dependency.Initialize();
                    return dependency;
                });
            </code>
            </example>
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``3(System.Func{``0,``1,``2})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            <example>
            <code>
            DI.Setup(nameof(Composition))
                .Bind&lt;IDependency&gt;().To((
                    Dependency dependency,
                    DateTimeOffset time) =&gt;
                {
                    dependency.Initialize(time);
                    return dependency;
                });
            </code>
            A variant using <see cref="T:Pure.DI.TagAttribute"/>:
            <code>
            DI.Setup(nameof(Composition))
                .Bind(&quot;now datetime&quot;).To(_ =&gt; DateTimeOffset.Now)
                .Bind&lt;IDependency&gt;().To((
                    Dependency dependency,
                    [Tag(&quot;now datetime&quot;)] DateTimeOffset time) =&gt;
                {
                    dependency.Initialize(time);
                    return dependency;
                });
            </code>
            </example>
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T4">Type #4 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T4">Type #4 of injected dependency.</typeparam>
            <typeparam name="T5">Type #5 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T4">Type #4 of injected dependency.</typeparam>
            <typeparam name="T5">Type #5 of injected dependency.</typeparam>
            <typeparam name="T6">Type #6 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T4">Type #4 of injected dependency.</typeparam>
            <typeparam name="T5">Type #5 of injected dependency.</typeparam>
            <typeparam name="T6">Type #6 of injected dependency.</typeparam>
            <typeparam name="T7">Type #7 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="M:Pure.DI.IBinding.To``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Completes the binding chain by specifying the implementation using a simplified factory method. It allows you to manually create an instance, call the necessary methods, initialize properties, fields, etc. Each parameter of this factory method represents a dependency injection. Starting with C# 10, you can also put the <see cref="T:Pure.DI.TagAttribute"/> in front of the parameter to specify the tag of the injected dependency.
            </summary>
            <param name="factory">An expression for manually creating and initializing an instance.</param>
            <typeparam name="T1">Type #1 of injected dependency.</typeparam>
            <typeparam name="T2">Type #2 of injected dependency.</typeparam>
            <typeparam name="T3">Type #3 of injected dependency.</typeparam>
            <typeparam name="T4">Type #4 of injected dependency.</typeparam>
            <typeparam name="T5">Type #5 of injected dependency.</typeparam>
            <typeparam name="T6">Type #6 of injected dependency.</typeparam>
            <typeparam name="T7">Type #7 of injected dependency.</typeparam>
            <typeparam name="T8">Type #7 of injected dependency.</typeparam>
            <typeparam name="T">The implementation type.</typeparam>
            <returns>Reference to the setup continuation chain.</returns>
            <seealso cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.To``1"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <seealso cref="M:Pure.DI.IBinding.As(Pure.DI.Lifetime)"/>
        </member>
        <member name="T:Pure.DI.IContext">
            <summary>
            Injection context. Cannot be used outside of the binding setup.
            </summary>
        </member>
        <member name="P:Pure.DI.IContext.Tag">
            <summary>
            The tag that was used to inject the current object in the object graph. Cannot be used outside of the binding setup. See also <see cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;Lazy&lt;TT&gt;&gt;()
                .To(ctx =&gt;
                {
                    ctx.Inject&lt;Func&lt;TT&gt;&gt;(ctx.Tag, out var func);
                    return new Lazy&lt;TT&gt;(func, false);
                };
            </code>
            </example>
            </summary>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
            <seealso cref="M:Pure.DI.IBinding.Tags(System.Object[])"/>
        </member>
        <member name="P:Pure.DI.IContext.ConsumerTypes">
            <summary>
            The types of consumers for which the instance is created. Cannot be used outside of the binding setup. Guaranteed to contain at least one element.
            </summary>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
        </member>
        <member name="M:Pure.DI.IContext.Inject``1(``0@)">
             <summary>
             Injects an instance of type <c>T</c>. Cannot be used outside of the binding setup.
             <example>
             <code>
             DI.Setup("Composition")
                 .Bind&lt;IService&gt;()
                 To(ctx =&gt;
                 {
                     ctx.Inject&lt;IDependency&gt;(out var dependency);
                     return new Service(dependency);
                 })
             </code>
             <br/>
             and another example:<br/>
             <code>
             DI.Setup("Composition")
                 .Bind&lt;IService&gt;()
                 To(ctx =&gt;
                 {
                     // Builds up an instance with all necessary dependencies
                     ctx.Inject&lt;Service&gt;(out var service);
            
             
                     service.Initialize();
                     return service;
                 })
             </code>
             </example>
             </summary>
             <param name="value">Injectable instance.</param>.
             <typeparam name="T">Instance type.</typeparam>
             <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
        </member>
        <member name="M:Pure.DI.IContext.Inject``1(System.Object,``0@)">
            <summary>
            Injects an instance of type <c>T</c> marked with a tag. Cannot be used outside of the binding setup.
            <example>
            <code>
            DI.Setup("Composition")
                .Bind&lt;IService&gt;()
                To(ctx =&gt;
                {
                    ctx.Inject&lt;IDependency&gt;("MyTag", out var dependency);
                    return new Service(dependency);
                })
            </code>
            </example>
            </summary>
            <param name="tag">The injection tag. See also <see cref="M:Pure.DI.IBinding.Tags(System.Object[])"/></param>.
            <param name="value">Injectable instance.</param>.
            <typeparam name="T">Instance type.</typeparam>
            <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
        </member>
        <member name="M:Pure.DI.IContext.BuildUp``1(``0)">
             <summary>
             Builds up of an existing object. In other words, injects the necessary dependencies via methods, properties, or fields into an existing object. Cannot be used outside of the binding setup.
             <example>
             <code>
             DI.Setup("Composition")
                 .Bind&lt;IService&gt;()
                 To(ctx =&gt;
                 {
                     var service = new Service();
                     // Initialize an instance with all necessary dependencies
                     ctx.BuildUp(service);
            
             
                     return service;
                 })
             </code>
             </example>
             </summary>
             <param name="value">An existing object for which the injection(s) is to be performed.</param>
             <typeparam name="T">Object type.</typeparam>
             <seealso cref="M:Pure.DI.IBinding.To``1(System.Func{Pure.DI.IContext,``0})"/>
        </member>
        <member name="T:Pure.DI.DI">
            <summary>
            An API for a Dependency Injection setup.
            </summary>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)">
             <summary>
             Begins the definitions of the Dependency Injection setup chain.
             <example>
             <code>
             interface IDependency;
            
             
             class Dependency : IDependency;
            
             
             interface IService;
            
             
             class Service(IDependency dependency) : IService;
            
             
             DI.Setup("Composition")
               .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;()
               .Bind&lt;IService&gt;().To&lt;Service&gt;()
               .Root&lt;IService&gt;("Root");
             </code>
             </example>
             </summary>
             <param name="compositionTypeName">An optional argument specifying the partial class name to generate.</param>
             <param name="kind">An optional argument specifying the kind of setup. Please <see cref="T:Pure.DI.CompositionKind"/> for details. It defaults to <c>Public</c>.</param>
             <returns>Reference to the setup continuation chain.</returns>
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``1(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``2(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``3(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``4(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``5(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``6(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``7(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Bind``8(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.RootBind``1(System.String,Pure.DI.RootKinds,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.DependsOn(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.GenericTypeArgumentAttribute``1">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.TypeAttribute``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.TagAttribute``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.OrdinalAttribute``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.DefaultLifetime(Pure.DI.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.DefaultLifetime``1(Pure.DI.Lifetime,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Arg``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.RootArg``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Root``1(System.String,System.Object,Pure.DI.RootKinds)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Roots``1(System.String,Pure.DI.RootKinds,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Builder``1(System.String,Pure.DI.RootKinds)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Builders``1(System.String,Pure.DI.RootKinds,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Hint(Pure.DI.Hint,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Accumulate``2(Pure.DI.Lifetime[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.GenericTypeArgument``1">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.As(Pure.DI.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.Tags(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``1">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``1(System.Func{Pure.DI.IContext,``0})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``2(System.Func{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``3(System.Func{``0,``1,``2})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``4(System.Func{``0,``1,``2,``3})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``5(System.Func{``0,``1,``2,``3,``4})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <inheritdoc />
        </member>
        <member name="M:Pure.DI.DI.Configuration.To``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <inheritdoc />
        </member>
        <member name="T:Pure.DI.Pair`2">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Pure.DI.Buckets`2">
            <summary>
            For internal use. 
            </summary>
        </member>
        <member name="T:Pure.DI.IResolver`2">
            <summary>
            Abstract dependency resolver.
            </summary>
            <typeparam name="TComposite">The composition type.</typeparam>
            <typeparam name="T">The type of the composition root.</typeparam>
        </member>
        <member name="M:Pure.DI.IResolver`2.Resolve(`0)">
            <summary>
            Resolves the composition root.
            </summary>
            <param name="composite">The composition.</param>
            <returns>A composition root.</returns>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="M:Pure.DI.IResolver`2.ResolveByTag(`0,System.Object)">
            <summary>
            Resolves the composition root by type and tag.
            </summary>
            <param name="composite">The composition.</param>
            <param name="tag">The tag of a composition root.</param>
            <returns>A composition root.</returns>
            <seealso cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
        </member>
        <member name="T:Pure.DI.TT">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT1">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS1">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE1">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable1">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable1">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary1`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList1`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT2">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS2">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE2">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable2">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable2">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary2`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList2`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT3">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS3">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE3">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable3">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable3">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary3`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList3`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT4">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS4">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE4">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable4">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable4">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary4`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList4`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT5">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS5">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE5">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable5">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable5">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary5`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList5`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT6">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS6">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE6">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable6">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable6">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary6`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList6`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT7">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS7">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE7">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable7">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable7">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary7`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList7`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT8">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS8">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE8">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDisposable8">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable8">
            <summary>
            Represents the generic type arguments marker for <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparable8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IComparable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEquatable8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IEquatable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerable8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEnumerator8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEnumerator&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTCollection8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ICollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTList8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTSet8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.ISet&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTComparer8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTEqualityComparer8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IEqualityComparer&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTDictionary8`2">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IDictionary&gt;TKey, TValue&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObservable8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObservable&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTObserver8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.IObserver&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyCollection8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyCollection&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TTReadOnlyList8`1">
            <summary>
            Represents the generic type arguments marker for <see cref="!:global::System.Collections.Generic.IReadOnlyList&gt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:Pure.DI.TT9">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS9">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE9">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT10">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS10">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE10">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT11">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS11">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE11">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT12">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS12">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE12">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT13">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS13">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE13">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT14">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS14">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE14">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT15">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS15">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE15">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="T:Pure.DI.TT16">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTS16">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:Pure.DI.TTE16">
            <summary>
            Represents the generic type arguments marker for a enum type.
            </summary>
        </member>
        <member name="M:Pure.DI.Core.IWildcardMatcher.Match(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)">
            <summary>
                Return true if the given expression matches the given name. Supports the following wildcards:
                '*', '?', '&lt;', '&gt;', '"'. The backslash character '\' escapes.
            </summary>
            <param name="wildcard">The wildcard expression to match with, such as "*.foo".</param>
            <param name="text">The text to check against the expression.</param>
            <param name="ignoreCase">True to ignore case (default).</param>
            <param name="useExtendedWildcards">True to use additional expressions symbols.</param>
        </member>
        <member name="T:Pure.DI.Core.WildcardMatcher">
            <summary>
                Provides methods for matching file system names.
            </summary>
        </member>
        <member name="T:Pure.DI.Generator">
            <summary>
            <para>
            <b>Composition roots:</b><br/>
            <list type="bullet">
            <item>
            <term>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> <see cref="P:Pure.DI.Generator.Api"/>
            </term>
            <description>
            Provides a composition root of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Pure.DI.Core.Models.Unit"/> <see cref="M:Pure.DI.Generator.Generate(Pure.DI.Core.IGeneratorOptions,Pure.DI.Core.ISources,Pure.DI.Core.IGeneratorDiagnostic,System.Collections.Generic.IEnumerable{Pure.DI.Core.Models.SyntaxUpdate},System.Threading.CancellationToken)"/>
            </term>
            <description>
            Provides a composition root of type <see cref="T:Pure.DI.Core.Models.Unit"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Pure.DI.IObserversRegistry"/> <see cref="P:Pure.DI.Generator.Observers"/>
            </term>
            <description>
            Provides a composition root of type <see cref="T:Pure.DI.Core.ObserversRegistry"/>.
            </description>
            </item>
            </list>
            </para>
            <example>
            This example shows how to get an instance of type <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the composition root <see cref="P:Pure.DI.Generator.Api"/>:
            <code>
            var composition = new Generator();
            var instance = composition.Api;
            </code>
            See also:
            <br/><see cref="M:Pure.DI.DI.Setup(System.String,Pure.DI.CompositionKind)"/>
            <br/><see cref="M:Pure.DI.IConfiguration.Bind(System.Object[])"/>
            <br/><see cref="M:Pure.DI.IConfiguration.Bind``1(System.Object[])"/>
            </example>
            <br/>
            <br/>This class was created by <a href="https://github.com/DevTeam/Pure.DI">Pure.DI</a> source code generator.
            </summary>
        </member>
        <member name="M:Pure.DI.Generator.#ctor">
            <summary>
            This parameterized constructor creates a new instance of <see cref="T:Pure.DI.Generator"/> with arguments.
            </summary>
        </member>
        <member name="M:Pure.DI.Generator.#ctor(Pure.DI.Generator)">
            <summary>
            This constructor creates a new instance of <see cref="T:Pure.DI.Generator"/> scope based on <paramref name="parentScope"/>. This allows the <see cref="F:Pure.DI.Lifetime.Scoped"/> life time to be applied.
            </summary>
            <param name="parentScope">Scope parent.</param>
        </member>
        <member name="M:Pure.DI.Generator.Generate(Pure.DI.Core.IGeneratorOptions,Pure.DI.Core.ISources,Pure.DI.Core.IGeneratorDiagnostic,System.Collections.Generic.IEnumerable{Pure.DI.Core.Models.SyntaxUpdate},System.Threading.CancellationToken)">
            <summary>
            <para>
            Provides a composition root of type <see cref="T:Pure.DI.Core.Models.Unit"/>.
            </para>
            <example>
            This example shows how to get an instance of type <see cref="T:Pure.DI.Core.Models.Unit"/>:
            <code>
            var composition = new Generator();
            var instance = composition.Generate(options, sources, diagnostic, updates, cancellationToken);
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Pure.DI.Generator.Observers">
            <summary>
            <para>
            Provides a composition root of type <see cref="T:Pure.DI.Core.ObserversRegistry"/>.
            </para>
            <example>
            This example shows how to get an instance of type <see cref="T:Pure.DI.Core.ObserversRegistry"/>:
            <code>
            var composition = new Generator();
            var instance = composition.Observers;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Pure.DI.Generator.Api">
            <summary>
            <para>
            Provides a composition root of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </para>
            <example>
            This example shows how to get an instance of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>:
            <code>
            var composition = new Generator();
            var instance = composition.Api;
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Pure.DI.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_AccumulatorCannotAccumulateGenericTypeMarker">
            <summary>
              Looks up a localized string similar to The accumulator cannot accumulate instances based on a generic type marker..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_AccumulatorTypeCannotBeGenericTypeMarker">
            <summary>
              Looks up a localized string similar to The accumulator type cannot be based on a generic type marker..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_AsynchronousFactoryWithAsyncNotSupported">
            <summary>
              Looks up a localized string similar to Asynchronous factory with the async keyword is not supported..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_CannotBuildDependencyGraph">
            <summary>
              Looks up a localized string similar to Cannot build a dependency graph..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_ClassArgumentTypeCannotBeGenericTypeMarker">
            <summary>
              Looks up a localized string similar to The class argument type cannot be based on a generic type marker..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_DependencyGraphConstractionFailure">
            <summary>
              Looks up a localized string similar to It is not possible to construct a dependency graph..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidBinding">
            <summary>
              Looks up a localized string similar to The binding is defined incorrectly..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidBindingDueToCompilationError">
            <summary>
              Looks up a localized string similar to Invalid binding due to compilation error..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidBuildersType">
            <summary>
              Looks up a localized string similar to Invalid builders type..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidBuilderType">
            <summary>
              Looks up a localized string similar to Invalid builder type..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidNumberOfInitializers">
            <summary>
              Looks up a localized string similar to Invalid number of initializers..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidRootsRype">
            <summary>
              Looks up a localized string similar to Invalid roots type..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_InvalidRootType">
            <summary>
              Looks up a localized string similar to Invalid root type..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_AttributeMemberCannotBeProcessed">
            <summary>
              Looks up a localized string similar to {0} of the type {1} cannot be processed because it is marked with multiple mutually exclusive attributes..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_CannotBeInstantiatedNoAccessibleConstructor">
            <summary>
              Looks up a localized string similar to An instance of {0} cannot be instantiated due to no accessible constructor available..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_CannotConstructAbstractType">
            <summary>
              Looks up a localized string similar to An instance of {0} cannot be constructed because it is an abstract type..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_CannotFindSetup">
            <summary>
              Looks up a localized string similar to Cannot find setup &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_CannotUseContextDirectly">
            <summary>
              Looks up a localized string similar to It is not possible to use &quot;{0}&quot; directly. Only its methods or properties can be used..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_CyclicDependency">
            <summary>
              Looks up a localized string similar to Cyclic dependency has been found: {0}..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidArgumentName">
            <summary>
              Looks up a localized string similar to Invalid argument name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidAttributeArgumentPosition">
            <summary>
              Looks up a localized string similar to The argument position {0} of attribute {1} is out of range [0..{2}]..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidCompositionTypeName">
            <summary>
              Looks up a localized string similar to Invalid composition type name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidIdentifier">
            <summary>
              Looks up a localized string similar to Invalid identifier &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidRegularExpression">
            <summary>
              Looks up a localized string similar to Invalid regular expression {0}: &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidRootName">
            <summary>
              Looks up a localized string similar to Invalid root name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_InvalidWildcard">
            <summary>
              Looks up a localized string similar to Invalid wildcard {0}: &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_LifetimeDoesNotSupportCyclicDependencies">
            <summary>
              Looks up a localized string similar to {0} lifetime does not support cyclic dependencies..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_MaximumNumberOfIterations">
            <summary>
              Looks up a localized string similar to The maximum number of iterations {0} was exceeded  was exceeded when building the optimal dependency graph. Try to specify the dependency graph more accurately..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_MustBeApiCall">
            <summary>
              Looks up a localized string similar to {0} must be a constant value of type {1} or a special API call..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_MustBeValueOfType">
            <summary>
              Looks up a localized string similar to {0} must be a non-null value of type {1}..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NoAccessibleConstructor">
            <summary>
              Looks up a localized string similar to There is no accessible non-static constructor of type {0} with an argument matching &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NoAccessibleFieldOrProperty">
            <summary>
              Looks up a localized string similar to There is no accessible non-static writable field or property matched with &quot;{0}&quot; of {1}..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NoAccessibleMethod">
            <summary>
              Looks up a localized string similar to There is no accessible non-static method of type {0} with a name matching &quot;{1}&quot; an argument matching &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NotImplement">
            <summary>
              Looks up a localized string similar to {0} does not implement {1}..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NotSupported">
            <summary>
              Looks up a localized string similar to {0} is not supported..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_NoTypeForWildcard">
            <summary>
              Looks up a localized string similar to There is no type found that inherits from {0} whose name matches the &quot;{1}&quot; filter..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_RootDuplicate">
            <summary>
              Looks up a localized string similar to The composition root &quot;{0}&quot; duplicates the previously declared root &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_TooLargeComposition">
            <summary>
              Looks up a localized string similar to The composition is too large. Stopped on the #{0} dependency..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_TypeWithLifetimeRequiresDirectOrTransitiveInjection">
            <summary>
              Looks up a localized string similar to Type {0} with lifetime {1} requires direct or transitive dependency injection of type {2} with lifetime {3}, which can lead to data leakage and unexpected behavior..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_UnableToResolve">
            <summary>
              Looks up a localized string similar to Unable to resolve &quot;{0}&quot; in {1}..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_Template_UnsupportLanguage">
            <summary>
              Looks up a localized string similar to {0} does not support C# {1}. Please use language version {2} or greater..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_TooManyTypeParameters">
            <summary>
              Looks up a localized string similar to Too many type parameters..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Error_UnhandledError">
            <summary>
              Looks up a localized string similar to An unhandled error has occurred..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Info_CodeGenerationAborted">
            <summary>
              Looks up a localized string similar to Code generation aborted..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Warning_BindingIsNotUsed">
            <summary>
              Looks up a localized string similar to Binding is not used..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Warning_NoRoots">
            <summary>
              Looks up a localized string similar to None of the composition roots are declared. Add at least one root..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Warning_Template_BindingHasBeenOverridden">
            <summary>
              Looks up a localized string similar to The binding for {0} has been overridden..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Warning_Template_InjectionSiteIsNotUsed">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; of the tag on the injection site is not used..
            </summary>
        </member>
        <member name="P:Pure.DI.Strings.Warning_Template_RootCannotBeResolvedByResolveMethods">
            <summary>
              Looks up a localized string similar to The root {0} cannot be resolved using Resolve methods due it has arguments {1}, so an exception will be thrown when trying to do it..
            </summary>
        </member>
    </members>
</doc>
